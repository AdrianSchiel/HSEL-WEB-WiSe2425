class GCGame extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.updateContent()}static get observedAttributes(){return["image","description","title"]}attributeChangedCallback(n,t,e){this.updateContent()}updateContent(){const n=this.getAttribute("image"),t=this.getAttribute("title"),e=this.getAttribute("description"),i="\n          img{\n            width: 100%;\n            height: auto; /* Beibehaltung des Seitenverhältnisses */\n            border-radius: 15px;\n            object-fit: cover; /* Alternative: 'contain', falls Ränder erlaubt sind */\n            display: block;\n          }\n          h1 {\n            text-transform: uppercase;\n            margin-bottom: 20px;\n            font-weight: 600;\n            font-size: 2rem;\n            font-family: 'Roboto',Arial,sans-serif;\n          }\n\n          p {\n            padding-top: 10px;\n            font-size: 1.2rem;\n            line-height: 1.6;\n          }\n          @media only screen and (max-width: 1160px) {\n            img {\n              width: 100%;\n            }\n\n            h1 {\n              font-size: 1.5rem;\n            }\n\n            p {\n              font-size: 1rem;\n            }\n          }\n    ",s=`\n          <img part="game-img"   \n            src="${n}_1050.webp" \n            srcset="\n              ${n}_768.webp 768w,\n              ${n}_1050.webp 1050w,\n              ${n}_1400.webp 1400w,\n              ${n}_2100.webp 2100w,\n              ${n}_2800.webp 2800w\n            " \n            sizes="(max-width: 768px) 768px, (max-width: 1400px) 1050px, 100vw" \n            alt="Game-Thumbnail" />\n          <div class="game-info">\n              <h1>${t}</h1>\n              <p>${e}</p>\n          </div>\n    `;this.shadowRoot.innerHTML=`\n      <style>${i}</style>\n      ${s}\n    `}}customElements.define("gc-game",GCGame);